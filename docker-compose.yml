version: '3.8'

services:

    #  Base de datos PostgreSQL
    postgres_db:
        image: postgres:15-alpine
        container_name: postgres_db
        environment:
            POSTGRES_USER: user_SSDD
            POSTGRES_PASSWORD: SSDDcontraseña
            POSTGRES_DB: yahoo_respuestas_db
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
            interval: 5s
            timeout: 5s
            retries: 5
        restart: always

    # Stack de Kafka

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: kafka
        depends_on:
            - zookeeper
        ports:
            - "9092:9092"
        environment:
            - KAFKA_BROKER_ID :1
            - KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            - KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
            - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        healthcheck:
            test: ["usr/bin/cub", "kafka-ready", "-b", "kafka:9092", "1", "60"]
            interval: 10s
            timeout: 10s
            retries: 5
    
    # Stack de Flink
    
    flink_jobmanager:
        image: flink:latest
        container_name: flink_jobmanager
        ports:
            - "8081:8081"
        environment:
            - JOB_MANAGER_RPC_ADDRESS=flink_jobmanager
    
    flink_taskmanager:
        image: flink:latest
        container_name: flink_taskmanager
        depends_on:
            - flink_jobmanager
        command: taskmanager
        environment:
            - JOB_MANAGER_RPC_ADDRESS=flink_jobmanager

    # modulos de la aplicacion
    generador_trafico:
        build:
            context: ./generador_trafico
        container_name: generador_trafico
        depends_on:
            kafka:
                condition: service_healthy
            postgres_db:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:9092
            DB_HOST: postgres_db
            DB_NAME: yahoo_respuestas_db
            DB_USER: user_SSDD
            DB_PASS: SSDDcontraseña
        volumes:
            - ./data:/app/data
        command: ["python","generador_trafico.py"]

    almacenamiento_servicio:
        build:
            context: ./almacenamiento
        container_name: almacenamiento_servicio
        depends_on:
            kafka:
                condition: service_healthy
            postgres_db:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:9092
            DB_HOST: postgres_db
            DB_NAME: yahoo_respuestas_db
            DB_USER: user_SSDD
            DB_PASS: SSDDcontraseña
        command: ["python", "almacenamiento.py"]

    LLM:
        build:
            context: ./LLM
        container_name: LLM
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:9092
            GEMINI_API_KEY: ${GEMINI_API_KEY}
            GEMINI_MODEL_NAME: gemini-2.5-flash-preview-05-20
        command: ["python", "LLM_worker.py"]
    
    retry_quota:
        build:
            context: ./retry_workers
        container_name: retry_quota
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:9092
            QUOTA_RETRY_DELAY: 60 
        command: ["python","retry_quota.py"]

    retry_overload:
        build:
            context: ./retry_workers
        container_name: retry_overload
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:9092
            OVERLOAD_BASE_DELAY: 5
            OVERLAOD_MAX_RETRIES: 5
        command: ["python","retry_overload.py"]

    flink_job:
        build: 
            context: ./flink
        container_name: flink_job
        depends_on:
            - flink-jobmanager
        command: flink run /app/flink.py
            
volumes:
    postgres_data: