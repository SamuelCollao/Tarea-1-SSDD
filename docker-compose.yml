services:

    #  Base de datos PostgreSQL
    postgres_db:
        image: postgres:15-alpine
        container_name: postgres_db
        environment:
            POSTGRES_DB: yahoo_respuestas_db
            POSTGRES_USER: user_SSDD
            POSTGRES_PASSWORD: SSDDcontraseña
        volumes:
            - postgres_data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
            interval: 5s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    # Stack de Kafka

    zookeeper:
        image: confluentinc/cp-zookeeper:7.6.1
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"
        healthcheck:
            test: ["CMD", "sh", "-c", "nc -z localhost 2181"]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    kafka:
        image: confluentinc/cp-kafka:7.6.1
        container_name: kafka
        depends_on:
            zookeeper:
                condition: service_healthy
        ports:
            - "9092:9092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_PROCESS_ROLES:
            KAFKA_NODE_ID:
        healthcheck:
            test: ["CMD", "sh", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
            interval: 10s
            timeout: 5s
            retries: 5
        restart: unless-stopped

    # Stack de Flink
    
    flink-jobmanager:
        image: flink:1.18
        container_name: flink-jobmanager
        ports:
            - "8081:8081"
        command: jobmanager
        volumes:
            - ./flink:/opt/flink/usrlib
        environment:
            - |
                FLINK_PROPERTIES=
                jobmanager.rpc.address: flink-jobmanager    
        restart: unless-stopped

    flink-taskmanager:
        image: flink:1.18
        container_name: flink-taskmanager
        depends_on:
            - flink-jobmanager
        command: taskmanager
        volumes:
            - ./flink:/opt/flink/usrlib
        environment:
            - |
                FLINK_PROPERTIES=
                jobmanager.rpc.address: flink-jobmanager
                taskmanager.numberOfTaskSlots: 1


    # modulos de la aplicacion
    generador_trafico:
        build:
            context: ./generador_trafico
        container_name: generador_trafico
        depends_on:
            postgres_db:
                condition: service_healthy
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:29092
            POSTGRES_HOST: postgres_db
            POSTGRES_DB: yahoo_respuestas_db
            POSTGRES_USER: user_SSDD
            POSTGRES_PASSWORD: SSDDcontraseña
        volumes:
            - ./data:/app/data
        command: ["python","generador_trafico.py"]
        restart: unless-stopped


    almacenamiento_servicio:
        build:
            context: ./almacenamiento
        container_name: almacenamiento_servicio
        depends_on:
            kafka:
                condition: service_healthy
            postgres_db:
                condition: service_healthy
        mem_limit: 512m
        environment:
            KAFKA_BROKER: kafka:29092
            POSTGRES_HOST: postgres_db
            POSTGRES_DB: yahoo_respuestas_db
            POSTGRES_USER: user_SSDD
            POSTGRES_PASSWORD: SSDDcontraseña
        command: ["python", "almacenamiento.py"]
        restart: unless-stopped


    llm-worker:
        build:
            context: ./llm-worker
        container_name: llm-worker
        depends_on:
            kafka:
                condition: service_healthy
        mem_limit: 512m
        environment:
            KAFKA_BROKER: kafka:29092
            GEMINI_API_KEY: ${GEMINI_API_KEY}
            GEMINI_MODEL: gemini-2.5-flash-preview-05-20
            GEMINI_API_URL: https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent
        command: ["python", "LLM_worker.py"]
        restart: unless-stopped
    
    retry_quota:
        build:
            context: ./retry_workers
        container_name: retry_quota
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:29092
            QUOTA_RETRY_DELAY: 60 
        command: ["python","retry_quota.py"]
        restart: unless-stopped


    retry_overload:
        build:
            context: ./retry_workers
        container_name: retry_overload
        depends_on:
            kafka:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:29092
            OVERLOAD_BASE_DELAY: 5
            OVERLOAD_MAX_RETRIES: 4
        command: ["python","retry_overload.py"]
        restart: unless-stopped


    flink_job:
        build: 
            context: ./flink
            dockerfile: Dockerfile
        container_name: flink_job
        depends_on:
            kafka: 
                condition: service_healthy
            flink-jobmanager:
                condition: service_started
            postgres_db:
                condition: service_healthy
        environment:
            KAFKA_BROKER: kafka:29092
        volumes:
            - ./flink:/app
        command: flink run --python /app/flink.py
            
volumes:
    postgres_data: